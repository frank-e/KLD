* REXX.KLD - KEDIT Language Definition for classic (ANSI) REXX
* and related ooRexx features, mostly identical to the KeditW32
* built-in REXX.KLD (Version 1.1 - May 2007).

:case
 ignore
:option
 rexx
:number
 rexx
:identifier
 [a-zA-Z!?_]      [a-zA-Z0-9!?_]
:string
 single
 double
:comment
 paired     /* */ nest
* for ooRexx:
 line       --    any
:header
* for ooRexx directives:
 line      :      column 1
:label
 delimiter :      any
:match
 (                )
* loop and [] added for ooRexx:
 [                ]
 do,loop,select   end   when,otherwise
:keyword
 address     type 5
 arg         type 7
 by          type 2
 call        type 5
 digits      type 2
 do          type 5
 drop        type 1
 else        type 1
 end         type 1
 engineering type 2
 exit        type 1
* for ooRexx:
*expose      type 2
 expose      type 3
 for         type 2
 forever     type 2
 form        type 2
 fuzz        type 2
 if          type 1
 interpret   type 1
 iterate     type 1
 leave       type 1
 linein      type 2
 name        type 2
 nop         type 1
 numeric     type 5
 off         type 2
 on          type 2
 options     type 1
 otherwise   type 1
 parse       type 5
 procedure   type 5
 pull        type 7
 push        type 1
 queue       type 1
 return      type 1
 say         type 1
 scientific  type 2
 select      type 1
 signal      type 5
 source      type 2
 to          type 2
 then        type 1
 trace       type 5
 until       type 2
 upper       type 2
 value       type 2
 var         type 2
 version     type 2
* for ooRexx guard:
*when        type 1
 when        type 5
 while       type 2
 with        type 2
* REXX conditions:
 error       type 2
 failure     type 2
 halt        type 2
 lostdigits  type 2
 notready    type 2
 novalue     type 2
 syntax      type 2
* ooRexx keywords:
 additional  type 2
 all         type 2
 array       type 2
 guard       type 5
 loop        type 5
 noobject    type 2
 nostring    type 2
 over        type 2
 propagate   type 2
 raise       type 5
 reply       type 1
 use         type 5
 user        type 2
:postcompare
*See 'ecolor': 9 blue (like keywords), 8 black, 6 dark cyan (strings), 1 red.
*The sort order is significant, anything already handled above does not work,
*e.g., most strings, identifiers, keywords, and comments are already colored.
*red for backtick + deprecated
 class [`^@#$]    alternate 1
*red controls and non-ASCII
 class [~!-~]     alternate 1
*includes U+00AC logical NOT
